__NUXT_JSONP__("/faq/customer_support", {data:[{},{path:"\u002Fvi\u002Ffaq\u002Fcustomer_support",section:"faq",page:{attrs:{title:"How to use JSX?",description:"How to use JSX with Nuxt.js?"},body:"\u003Cp\u003ENuxt.js uses \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fnuxt\u002Fnuxt.js\u002Ftree\u002Fdev\u002Fpackages\u002Fbabel-preset-app\"\u003E@nuxt\u002Fbabel-preset-app\u003C\u002Fa\u003E, which is based on the official \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fvuejs\u002Fvue-cli\u002Ftree\u002Fdev\u002Fpackages\u002F%40vue\u002Fbabel-preset-app\"\u003E@vue\u002Fbabel-preset-app\u003C\u002Fa\u003E for babel default configuration, so you can use JSX in your components.\u003C\u002Fp\u003E\n\u003Cp\u003EYou can now use JSX in the \u003Ccode\u003Erender\u003C\u002Fcode\u003E method of your components:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Escript\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"javascript\"\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  data () {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E { \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E'World'\u003C\u002Fspan\u003E }\n  },\n  render (h) {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eh1\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Eclass\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\"red\"\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{this.name}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eh1\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n  }\n}\n\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Escript\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cdiv class=\"Alert Alert--orange\"\u003E\n\n\u003Cp\u003EAliasing \u003Ccode\u003EcreateElement\u003C\u002Fcode\u003E to \u003Ccode\u003Eh\u003C\u002Fcode\u003E is a common convention youâ€™ll see in the Vue ecosystem but is actually optional for JSX since it \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fvuejs\u002Fbabel-plugin-transform-vue-jsx#h-auto-injection\"\u003Eautomatically injects\u003C\u002Fa\u003E \u003Ccode\u003Econst h = this.$createElement\u003C\u002Fcode\u003E in any method and getter (not functions or arrow functions) declared in ES2015 syntax that has JSX so you can drop the (h) parameter.\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\n\u003Cp\u003EYou can learn more about how to use it in the \u003Ca href=\"https:\u002F\u002Fvuejs.org\u002Fv2\u002Fguide\u002Frender-function.html#JSX\"\u003EJSX section\u003C\u002Fa\u003E of the Vue.js documentation.\u003C\u002Fp\u003E\n"},contributors:[]}],fetch:[],mutations:[]});