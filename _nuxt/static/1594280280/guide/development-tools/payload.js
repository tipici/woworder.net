__NUXT_JSONP__("/guide/development-tools", {data:[{},{path:"\u002Fvi\u002Fguide\u002Fdevelopment-tools",section:"guide",page:{attrs:{title:"Development Tools",description:"Nuxt.js helps you to make your web development enjoyable."},body:"\u003Cblockquote\u003E\n\u003Cp\u003ETesting your application is part of the web development. Nuxt.js helps you to make it as easy as possible.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch2 id=\"end-to-end-testing\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#end-to-end-testing\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EEnd-to-End Testing\u003C\u002Fh2\u003E\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Favajs\u002Fava\"\u003EAVA\u003C\u002Fa\u003E is a powerful JavaScript testing framework, mixed with \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Ftmpvar\u002Fjsdom\"\u003Ejsdom\u003C\u002Fa\u003E, we can use them to do end-to-end testing easily.\u003C\u002Fp\u003E\n\u003Cp\u003EFirst, we need to add AVA and jsdom as development dependencies:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Enpm install --save-dev ava jsdom\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EThen add a test script to our \u003Ccode\u003Epackage.json\u003C\u002Fcode\u003E and configure AVA to compile files that we import into our tests.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs javascript\"\u003E\u003Cspan class=\"hljs-string\"\u003E\"scripts\"\u003C\u002Fspan\u003E: {\n  \u003Cspan class=\"hljs-string\"\u003E\"test\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"ava\"\u003C\u002Fspan\u003E,\n},\n\u003Cspan class=\"hljs-string\"\u003E\"ava\"\u003C\u002Fspan\u003E: {\n  \u003Cspan class=\"hljs-string\"\u003E\"files\"\u003C\u002Fspan\u003E: [\n    \u003Cspan class=\"hljs-string\"\u003E\"test\u002F**\u002F*\"\u003C\u002Fspan\u003E\n  ]\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EWe are going to write our tests in the \u003Ccode\u003Etest\u003C\u002Fcode\u003E folder:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Emkdir \u003Cspan class=\"hljs-built_in\"\u003Etest\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003ELet&#39;s say we have a page in \u003Ccode\u003Epages\u002Findex.vue\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eh1\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Eclass\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\"red\"\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003EHello {{ name }}!\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eh1\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Escript\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"javascript\"\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  data () {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E { \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E'world'\u003C\u002Fspan\u003E }\n  }\n}\n\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Escript\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Estyle\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"css\"\u003E\n\u003Cspan class=\"hljs-selector-class\"\u003E.red\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attribute\"\u003Ecolor\u003C\u002Fspan\u003E: red;\n}\n\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Estyle\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EWhen we launch our app with \u003Ccode\u003Enpm run dev\u003C\u002Fcode\u003E and open \u003Ca href=\"http:\u002F\u002Flocalhost:3000\"\u003Ehttp:\u002F\u002Flocalhost:3000\u003C\u002Fa\u003E, we can see our red \u003Ccode\u003EHello world!\u003C\u002Fcode\u003E title.\u003C\u002Fp\u003E\n\u003Cp\u003EWe add our test file \u003Ccode\u003Etest\u002Findex.test.js\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E { resolve } \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E'path'\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E test \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E'ava'\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E { Nuxt, Builder } \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E'nuxt'\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Init Nuxt.js and start listening on localhost:4000\u003C\u002Fspan\u003E\ntest.before(\u003Cspan class=\"hljs-string\"\u003E'Init Nuxt.js'\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E (t) =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E rootDir = resolve(__dirname, \u003Cspan class=\"hljs-string\"\u003E'..'\u003C\u002Fspan\u003E)\n  \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E config = {}\n  \u003Cspan class=\"hljs-keyword\"\u003Etry\u003C\u002Fspan\u003E { config = \u003Cspan class=\"hljs-built_in\"\u003Erequire\u003C\u002Fspan\u003E(resolve(rootDir, \u003Cspan class=\"hljs-string\"\u003E'nuxt.config.js'\u003C\u002Fspan\u003E)) } \u003Cspan class=\"hljs-keyword\"\u003Ecatch\u003C\u002Fspan\u003E (e) {}\n  config.rootDir = rootDir \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F project folder\u003C\u002Fspan\u003E\n  config.dev = \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F production build\u003C\u002Fspan\u003E\n  config.mode = \u003Cspan class=\"hljs-string\"\u003E'universal'\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Isomorphic application\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E nuxt = \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E Nuxt(config)\n  t.context.nuxt = nuxt \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F We keep a reference to Nuxt so we can close the server at the end of the test\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Eawait\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E Builder(nuxt).build()\n  nuxt.listen(\u003Cspan class=\"hljs-number\"\u003E4000\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E'localhost'\u003C\u002Fspan\u003E)\n})\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Example of testing only generated html\u003C\u002Fspan\u003E\ntest(\u003Cspan class=\"hljs-string\"\u003E'Route \u002F exists and render HTML'\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E (t) =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E { nuxt } = t.context\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E context = {}\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E { html } = \u003Cspan class=\"hljs-keyword\"\u003Eawait\u003C\u002Fspan\u003E nuxt.renderRoute(\u003Cspan class=\"hljs-string\"\u003E'\u002F'\u003C\u002Fspan\u003E, context)\n  t.true(html.includes(\u003Cspan class=\"hljs-string\"\u003E'&lt;h1 class=\"red\"&gt;Hello world!&lt;\u002Fh1&gt;'\u003C\u002Fspan\u003E))\n})\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Example of testing via DOM checking\u003C\u002Fspan\u003E\ntest(\u003Cspan class=\"hljs-string\"\u003E'Route \u002F exists and renders HTML with CSS applied'\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E (t) =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E { nuxt } = t.context\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003Ewindow\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-keyword\"\u003Eawait\u003C\u002Fspan\u003E nuxt.renderAndGetWindow(\u003Cspan class=\"hljs-string\"\u003E'http:\u002F\u002Flocalhost:4000\u002F'\u003C\u002Fspan\u003E)\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E element = \u003Cspan class=\"hljs-built_in\"\u003Ewindow\u003C\u002Fspan\u003E.document.querySelector(\u003Cspan class=\"hljs-string\"\u003E'.red'\u003C\u002Fspan\u003E)\n  t.not(element, \u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E)\n  t.is(element.textContent, \u003Cspan class=\"hljs-string\"\u003E'Hello world!'\u003C\u002Fspan\u003E)\n  t.is(element.className, \u003Cspan class=\"hljs-string\"\u003E'red'\u003C\u002Fspan\u003E)\n  t.is(\u003Cspan class=\"hljs-built_in\"\u003Ewindow\u003C\u002Fspan\u003E.getComputedStyle(element).color, \u003Cspan class=\"hljs-string\"\u003E'red'\u003C\u002Fspan\u003E)\n})\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Close the Nuxt server\u003C\u002Fspan\u003E\ntest.after(\u003Cspan class=\"hljs-string\"\u003E'Closing server'\u003C\u002Fspan\u003E, (t) =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E { nuxt } = t.context\n  nuxt.close()\n})\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EWe can now launch our tests:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Enpm \u003Cspan class=\"hljs-built_in\"\u003Etest\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Ejsdom has some limitations because it does not use a browser. However, it will cover most of our tests. If you want to use a browser to test your application, you might want to check out \u003Ca href=\"http:\u002F\u002Fnightwatchjs.org\"\u003ENightwatch.js\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\u003Ch2 id=\"eslint-and-prettier\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#eslint-and-prettier\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EESLint and Prettier\u003C\u002Fh2\u003E\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ca href=\"http:\u002F\u002Feslint.org\"\u003EESLint\u003C\u002Fa\u003E is a great tool to keep your code clean.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fprettier.io\"\u003EPrettier\u003C\u002Fa\u003E is a very popular code formatter.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003EYou can add ESLint with Prettier pretty easily with Nuxt.js, first, you need to add the npm dependencies:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Enpm install --save-dev babel-eslint eslint eslint-config-prettier eslint-loader eslint-plugin-vue eslint-plugin-prettier prettier\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EThen, you can configure ESLint via a \u003Ccode\u003E.eslintrc.js\u003C\u002Fcode\u003E file in your root project directory:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-built_in\"\u003Emodule\u003C\u002Fspan\u003E.exports = {\n  \u003Cspan class=\"hljs-attr\"\u003Eroot\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003Eenv\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003Ebrowser\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003Enode\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E\n  },\n  \u003Cspan class=\"hljs-attr\"\u003EparserOptions\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003Eparser\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E'babel-eslint'\u003C\u002Fspan\u003E\n  },\n  \u003Cspan class=\"hljs-attr\"\u003Eextends\u003C\u002Fspan\u003E: [\n    \u003Cspan class=\"hljs-string\"\u003E'eslint:recommended'\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F https:\u002F\u002Fgithub.com\u002Fvuejs\u002Feslint-plugin-vue#priority-a-essential-error-prevention\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F consider switching to `plugin:vue\u002Fstrongly-recommended` or `plugin:vue\u002Frecommended` for stricter rules.\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-string\"\u003E'plugin:vue\u002Frecommended'\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-string\"\u003E'plugin:prettier\u002Frecommended'\u003C\u002Fspan\u003E\n  ],\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F required to lint *.vue files\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003Eplugins\u003C\u002Fspan\u003E: [\n    \u003Cspan class=\"hljs-string\"\u003E'vue'\u003C\u002Fspan\u003E\n  ],\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F add your custom rules here\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003Erules\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-string\"\u003E'semi'\u003C\u002Fspan\u003E: [\u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E'never'\u003C\u002Fspan\u003E],\n    \u003Cspan class=\"hljs-string\"\u003E'no-console'\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E'off'\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-string\"\u003E'vue\u002Fmax-attributes-per-line'\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E'off'\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-string\"\u003E'prettier\u002Fprettier'\u003C\u002Fspan\u003E: [\u003Cspan class=\"hljs-string\"\u003E'error'\u003C\u002Fspan\u003E, { \u003Cspan class=\"hljs-string\"\u003E'semi'\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E }]\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EThen, you can add \u003Ccode\u003Elint\u003C\u002Fcode\u003E and \u003Ccode\u003Elintfix\u003C\u002Fcode\u003E scripts to your \u003Ccode\u003Epackage.json\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-string\"\u003E\"scripts\"\u003C\u002Fspan\u003E: {\n  \u003Cspan class=\"hljs-string\"\u003E\"lint\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"eslint --ext .js,.vue --ignore-path .gitignore .\"\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-string\"\u003E\"lintfix\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"eslint --fix --ext .js,.vue --ignore-path .gitignore .\"\u003C\u002Fspan\u003E\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EYou can now launch \u003Ccode\u003Elint\u003C\u002Fcode\u003E to check for errors:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Enpm run lint\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eor \u003Ccode\u003Elintfix\u003C\u002Fcode\u003E to also fix those which are doable\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Enpm run lintfix\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EESLint will lint all of your JavaScript and Vue files while ignoring your ignored files defined in your \u003Ccode\u003E.gitignore\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\u003Cp\u003EIt is also recommended to enable ESLint hot reloading mode via webpack. This way ESLint will run on save during \u003Ccode\u003Enpm run dev\u003C\u002Fcode\u003E. Just add the following to your \u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E...\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F*\n   ** Build configuration\n  *\u002F\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003Ebuild\u003C\u002Fspan\u003E: {\n   \u003Cspan class=\"hljs-comment\"\u003E\u002F*\n    ** You can extend webpack config here\n   *\u002F\u003C\u002Fspan\u003E\n   extend(config, ctx) {\n      \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Run ESLint on save\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (ctx.isDev &amp;&amp; ctx.isClient) {\n        config.module.rules.push({\n          \u003Cspan class=\"hljs-attr\"\u003Eenforce\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"pre\"\u003C\u002Fspan\u003E,\n          \u003Cspan class=\"hljs-attr\"\u003Etest\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-regexp\"\u003E\u002F\\.(js|vue)$\u002F\u003C\u002Fspan\u003E,\n          loader: \u003Cspan class=\"hljs-string\"\u003E\"eslint-loader\"\u003C\u002Fspan\u003E,\n          \u003Cspan class=\"hljs-attr\"\u003Eexclude\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-regexp\"\u003E\u002F(node_modules)\u002F\u003C\u002Fspan\u003E\n        })\n      }\n    }\n  }\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cdiv class=\"Alert Alert--orange\"\u003E\n\n\u003Cp\u003EOne best practice is to add also \u003Ccode\u003E&quot;precommit&quot;: &quot;npm run lint&quot;\u003C\u002Fcode\u003E in your package.json to lint your code automatically before committing your code.\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n"},contributors:[]}],fetch:[],mutations:[]});