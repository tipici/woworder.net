__NUXT_JSONP__("/faq/webpack-plugins", {data:[{},{path:"\u002Fvi\u002Ffaq\u002Fwebpack-plugins",section:"faq",page:{attrs:{title:"How to add webpack plugins?",description:"How to add webpack plugins into my Nuxt.js application?"},body:"\u003Cp\u003EIn your \u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E file, under the \u003Ccode\u003Ebuild\u003C\u002Fcode\u003E option, you can pass webpack \u003Ccode\u003Eplugins\u003C\u002Fcode\u003E, the same way you would do\nit in \u003Ca href=\"https:\u002F\u002Fwebpack.js.org\u002Fconfiguration\u002Fplugins\u002F\"\u003Ea \u003Ccode\u003Ewebpack.config.js\u003C\u002Fcode\u003E file\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\u003Cp\u003EIn this example we add the webpack built-in \u003Ca href=\"https:\u002F\u002Fwebpack.js.org\u002Fplugins\u002Fprovide-plugin\u002F\"\u003EProvidePlugin\u003C\u002Fa\u003E\nfor automatically loading JavaScript modules (\u003Cem\u003Elodash\u003C\u002Fem\u003E and \u003Cem\u003EjQuery\u003C\u002Fem\u003E) instead of having to \u003Ccode\u003Eimport\u003C\u002Fcode\u003E or \u003Ccode\u003Erequire\u003C\u002Fcode\u003E\nthem everywhere.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E webpack \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E'webpack'\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003Ebuild\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003Eplugins\u003C\u002Fspan\u003E: [\n      \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E webpack.ProvidePlugin({\n        \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F global modules\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-string\"\u003E'$'\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E'jquery'\u003C\u002Fspan\u003E,\n        \u003Cspan class=\"hljs-string\"\u003E'_'\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E'lodash'\u003C\u002Fspan\u003E\n      })\n    ]\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cblockquote\u003E\n\u003Cp\u003ENote: You might not need jQuery in a Vue-based app.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003EWith Nuxt, you can also control plugins execution context: if they are meant to be run on the \u003Ccode\u003Eclient\u003C\u002Fcode\u003E or in the \u003Ccode\u003Eserver\u003C\u002Fcode\u003E builds (or differentiating \u003Ccode\u003Edev\u003C\u002Fcode\u003E and \u003Ccode\u003Eprod\u003C\u002Fcode\u003E builds) within \u003Ca href=\"\u002Fapi\u002Fconfiguration-build#extend\"\u003E\u003Ccode\u003Ebuild.extend\u003C\u002Fcode\u003E\u003C\u002Fa\u003E, where you can manually pass webpack plugins too.\u003C\u002Fp\u003E\n"},contributors:[]}],fetch:[],mutations:[]});