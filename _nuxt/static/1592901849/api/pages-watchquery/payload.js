__NUXT_JSONP__("/api/pages-watchquery", {data:[{},{path:"\u002Fvi\u002Fapi\u002Fpages-watchquery",section:"api",page:{attrs:{title:"API: The watchQuery Property",description:"Watch query strings and execute component methods on change (asyncData, fetch, validate, layout, ...)"},body:"\u003Cblockquote\u003E\n\u003Cp\u003EWatch query strings and execute component methods on change (asyncData, fetch(context), validate, layout, ...)\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cstrong\u003EType:\u003C\u002Fstrong\u003E \u003Ccode\u003EBoolean\u003C\u002Fcode\u003E or \u003Ccode\u003EArray\u003C\u002Fcode\u003E or \u003Ccode\u003EFunction\u003C\u002Fcode\u003E (default: \u003Ccode\u003E[]\u003C\u002Fcode\u003E)\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003EUse the \u003Ccode\u003EwatchQuery\u003C\u002Fcode\u003E key to set up a watcher for query strings. If the defined strings change, all component methods (asyncData, fetch(context), validate, layout, ...) will be called. Watching is disabled by default to improve performance.\u003C\u002Fp\u003E\n\u003Cp\u003EIf you want to set up a watcher for all query strings, set \u003Ccode\u003EwatchQuery: true\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003EwatchQuery\u003C\u002Fspan\u003E: [\u003Cspan class=\"hljs-string\"\u003E'page'\u003C\u002Fspan\u003E]\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EYou can also use the function \u003Ccode\u003EwatchQuery(newQuery, oldQuery)\u003C\u002Fcode\u003E to have more refined watchers.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  watchQuery (newQuery, oldQuery) {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Only execute component methods if the old query string contained `bar`\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F and the new query string contains `foo`\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E newQuery.foo &amp;&amp; oldQuery.bar\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cdiv class=\"Alert Alert--orange\"\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EWarning\u003C\u002Fstrong\u003E: The new \u003Ccode\u003Efetch\u003C\u002Fcode\u003E hook introduced in 2.12 is not affected by \u003Ccode\u003EwatchQuery\u003C\u002Fcode\u003E. For more information see \u003Ca href=\"\u002Fapi\u002Fpages-fetch#listening-to-query-string-changes\"\u003Elistening to query string changes\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n"},contributors:[]}],fetch:[],mutations:[]});