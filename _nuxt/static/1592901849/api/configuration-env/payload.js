__NUXT_JSONP__("/api/configuration-env", {data:[{},{path:"\u002Fvi\u002Fapi\u002Fconfiguration-env",section:"api",page:{attrs:{title:"API: The env Property",description:"Share environment variables between client and server."},body:"\u003Cul\u003E\n\u003Cli\u003EType: \u003Ccode\u003EObject\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003ENuxt.js lets you create environment variables client side, also to be shared from server side. \u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003EThe env property defines environment variables that should be available on the client side. They can be assigned using server side environment variables, the \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fnuxt-community\u002Fdotenv-module\"\u003Edotenv module\u003C\u002Fa\u003E ones or similar.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003EMake sure to read about \u003Ccode\u003Eprocess.env\u003C\u002Fcode\u003E and \u003Ccode\u003Eprocess.env == {}\u003C\u002Fcode\u003E below for better troubleshooting.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp\u003EExample (\u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E):\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003Eenv\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003EbaseUrl\u003C\u002Fspan\u003E: process.env.BASE_URL || \u003Cspan class=\"hljs-string\"\u003E'http:\u002F\u002Flocalhost:3000'\u003C\u002Fspan\u003E\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EThis lets you create a \u003Ccode\u003EbaseUrl\u003C\u002Fcode\u003E property that will be equal to the \u003Ccode\u003EBASE_URL\u003C\u002Fcode\u003E server side environment variable if available or defined. If not, \u003Ccode\u003EbaseUrl\u003C\u002Fcode\u003E in client side will be equal to \u003Ccode\u003E&#39;http:\u002F\u002Flocalhost:3000&#39;\u003C\u002Fcode\u003E. The server side variable BASE_URL is therefore copied to the client side via the \u003Ccode\u003Eenv\u003C\u002Fcode\u003E property in the \u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E. \nAlternatively, the other value is defined (\u003Ca href=\"http:\u002F\u002Flocalhost:3000\"\u003Ehttp:\u002F\u002Flocalhost:3000\u003C\u002Fa\u003E). \u003C\u002Fp\u003E\n\u003Cp\u003EThen, I can access my \u003Ccode\u003EbaseUrl\u003C\u002Fcode\u003E variable in 2 ways:\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003EVia \u003Ccode\u003Eprocess.env.baseUrl\u003C\u002Fcode\u003E.\u003C\u002Fli\u003E\n\u003Cli\u003EVia \u003Ccode\u003Econtext.env.baseUrl\u003C\u002Fcode\u003E, see \u003Ca href=\"\u002Fapi\u002Fcontext\"\u003Econtext API\u003C\u002Fa\u003E.\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003EYou can use the \u003Ccode\u003Eenv\u003C\u002Fcode\u003E property for giving a public token for example.\u003C\u002Fp\u003E\n\u003Cp\u003EFor the example above, we can use it to configure \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fmzabriskie\u002Faxios\"\u003Eaxios\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Eplugins\u002Faxios.js\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E axios \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E'axios'\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E axios.create({\n  \u003Cspan class=\"hljs-attr\"\u003EbaseURL\u003C\u002Fspan\u003E: process.env.baseUrl\n})\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EThen, in your pages, you can import axios like this: \u003Ccode\u003Eimport axios from &#39;~\u002Fplugins\u002Faxios&#39;\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Ch2 id=\"automatic-injection-of-environment-variables\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#automatic-injection-of-environment-variables\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EAutomatic injection of environment variables\u003C\u002Fh2\u003E\u003Cp\u003EIf you define environment variables starting with \u003Ccode\u003ENUXT_ENV_\u003C\u002Fcode\u003E in the build phase (f.ex. \u003Ccode\u003ENUXT_ENV_COOL_WORD=freezing nuxt build\u003C\u002Fcode\u003E, they&#39;ll be automatically injected into the process environment. Be aware that they&#39;ll potentially take precedence over defined variables in your \u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E with the same name.\u003C\u002Fp\u003E\n\u003Ch2 id=\"process-env-\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#process-env-\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003Eprocess.env == {}\u003C\u002Fh2\u003E\u003Cp\u003ENote that Nuxt uses webpack&#39;s \u003Ccode\u003EdefinePlugin\u003C\u002Fcode\u003E to define the environmental variable. This means that the actual \u003Ccode\u003Eprocess\u003C\u002Fcode\u003E or \u003Ccode\u003Eprocess.env\u003C\u002Fcode\u003E from Node.js is neither available nor defined. Each of the \u003Ccode\u003Eenv\u003C\u002Fcode\u003E properties defined in nuxt.config.js is individually mapped to \u003Ccode\u003Eprocess.env.xxxx\u003C\u002Fcode\u003E and converted during compilation.\u003C\u002Fp\u003E\n\u003Cp\u003EMeaning, \u003Ccode\u003Econsole.log(process.env)\u003C\u002Fcode\u003E will output \u003Ccode\u003E{}\u003C\u002Fcode\u003E but \u003Ccode\u003Econsole.log(process.env.your_var)\u003C\u002Fcode\u003E will still output your value. When webpack compiles your code, it replaces all instances of \u003Ccode\u003Eprocess.env.your_var\u003C\u002Fcode\u003E to the value you&#39;ve set it to. ie: \u003Ccode\u003Eenv.test = &#39;testing123&#39;\u003C\u002Fcode\u003E. If you use \u003Ccode\u003Eprocess.env.test\u003C\u002Fcode\u003E in your code somewhere, it is actually translated to &#39;testing123&#39;.\u003C\u002Fp\u003E\n\u003Cp\u003Ebefore\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (process.env.test == \u003Cspan class=\"hljs-string\"\u003E'testing123'\u003C\u002Fspan\u003E)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eafter\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-string\"\u003E'testing123'\u003C\u002Fspan\u003E == \u003Cspan class=\"hljs-string\"\u003E'testing123'\u003C\u002Fspan\u003E)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2 id=\"servermiddleware\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#servermiddleware\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EserverMiddleware\u003C\u002Fh2\u003E\u003Cp\u003EAs \u003Ca href=\"\u002Fapi\u002Fconfiguration-servermiddleware\"\u003EserverMiddleware\u003C\u002Fa\u003E is decoupled from the main Nuxt build, \u003Ccode\u003Eenv\u003C\u002Fcode\u003E variables defined in \u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E are not available there.\u003C\u002Fp\u003E\n"},contributors:[]}],fetch:[],mutations:[]});