__NUXT_JSONP__("/api/configuration-dev", {data:[{},{path:"\u002Fvi\u002Fapi\u002Fconfiguration-dev",section:"api",page:{attrs:{title:"API: The dev Property",description:"Define the development or production mode."},body:"\u003Cul\u003E\n\u003Cli\u003EType: \u003Ccode\u003EBoolean\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003EDefault: \u003Ccode\u003Etrue\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003EDefine the development or production mode of Nuxt.js.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003EThis property is overwritten by \u003Ca href=\"\u002Fguide\u002Fcommands\"\u003Enuxt commands\u003C\u002Fa\u003E:\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003Edev\u003C\u002Fcode\u003E is forced to \u003Ccode\u003Etrue\u003C\u002Fcode\u003E with \u003Ccode\u003Enuxt\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Edev\u003C\u002Fcode\u003E is forced to \u003Ccode\u003Efalse\u003C\u002Fcode\u003E with \u003Ccode\u003Enuxt build\u003C\u002Fcode\u003E, \u003Ccode\u003Enuxt start\u003C\u002Fcode\u003E and \u003Ccode\u003Enuxt generate\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003EThis property should be used when using \u003Ca href=\"\u002Fapi\u002Fnuxt\"\u003ENuxt.js programmatically\u003C\u002Fa\u003E:\u003C\u002Fp\u003E\n\u003Cp\u003EExample:\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003Edev\u003C\u002Fspan\u003E: (process.env.NODE_ENV !== \u003Cspan class=\"hljs-string\"\u003E'production'\u003C\u002Fspan\u003E)\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Ccode\u003Eserver.js\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E { Nuxt, Builder } = \u003Cspan class=\"hljs-built_in\"\u003Erequire\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E'nuxt'\u003C\u002Fspan\u003E)\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E app = \u003Cspan class=\"hljs-built_in\"\u003Erequire\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E'express'\u003C\u002Fspan\u003E)()\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E port = process.env.PORT || \u003Cspan class=\"hljs-number\"\u003E3000\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F We instantiate Nuxt.js with the options\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E config = \u003Cspan class=\"hljs-built_in\"\u003Erequire\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E'.\u002Fnuxt.config.js'\u003C\u002Fspan\u003E)\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E nuxt = \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E Nuxt(config)\napp.use(nuxt.render)\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Build only in dev mode\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (config.dev) {\n  \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E Builder(nuxt).build()\n}\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Listen the server\u003C\u002Fspan\u003E\napp.listen(port, \u003Cspan class=\"hljs-string\"\u003E'0.0.0.0'\u003C\u002Fspan\u003E).then(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003E()\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-built_in\"\u003Econsole\u003C\u002Fspan\u003E.log(\u003Cspan class=\"hljs-string\"\u003E`Server is listening on port: \u003Cspan class=\"hljs-subst\"\u003E${port}\u003C\u002Fspan\u003E`\u003C\u002Fspan\u003E)\n})\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EThen in your \u003Ccode\u003Epackage.json\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs json\"\u003E{\n  \u003Cspan class=\"hljs-attr\"\u003E\"scripts\"\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003E\"dev\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"node server.js\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003E\"build\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"nuxt build\"\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003E\"start\"\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E\"cross-env NODE_ENV=production node server.js\"\u003C\u002Fspan\u003E\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003ENote: You&#39;ll need to run \u003Ccode\u003Enpm install --save-dev cross-env\u003C\u002Fcode\u003E for the above example to work. If you&#39;re \u003Cem\u003Enot\u003C\u002Fem\u003E developing on Windows you can leave \u003Ccode\u003Ecross-env\u003C\u002Fcode\u003E out of your \u003Ccode\u003Estart\u003C\u002Fcode\u003E script and set \u003Ccode\u003ENODE_ENV\u003C\u002Fcode\u003E directly.\u003C\u002Fp\u003E\n"},contributors:[]}],fetch:[],mutations:[]});