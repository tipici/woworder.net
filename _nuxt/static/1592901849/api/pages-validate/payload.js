__NUXT_JSONP__("/api/pages-validate", {data:[{},{path:"\u002Fvi\u002Fapi\u002Fpages-validate",section:"api",page:{attrs:{title:"API: The validate Method",description:"Nuxt.js lets you define a validator method inside your dynamic route component."},body:"\u003Cblockquote\u003E\n\u003Cp\u003ENuxt.js lets you define a validator method inside your dynamic route component.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cstrong\u003EType:\u003C\u002Fstrong\u003E \u003Ccode\u003EFunction\u003C\u002Fcode\u003E or \u003Ccode\u003EAsync Function\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E\u003Ccode\u003Evalidate\u003C\u002Fcode\u003E is called every time before navigating to a new route. It will be called server-side once (on the first request to the Nuxt app) and client-side when navigating to further routes. This method takes the \u003Ca href=\"\u002Fapi\u002Fcontext\"\u003E\u003Ccode\u003Econtext\u003C\u002Fcode\u003E\u003C\u002Fa\u003E object as an argument.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003Evalidate({ params, query, store }) {\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F if the params are valid\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F will stop Nuxt.js to render the route and display the error page\u003C\u002Fspan\u003E\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E validate({ params, query, store }) {\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F await operations\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F if the params are valid\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F will stop Nuxt.js to render the route and display the error page\u003C\u002Fspan\u003E\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EYou can also return promises:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003Evalidate({ params, query, store }) {\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003EPromise\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E(\u003Cspan class=\"hljs-params\"\u003Eresolve\u003C\u002Fspan\u003E) =&gt;\u003C\u002Fspan\u003E setTimeout(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003E()\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E resolve()))\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003ENuxt.js lets you define a validator method inside your dynamic route component (In this example: \u003Ccode\u003Epages\u002Fusers\u002F_id.vue\u003C\u002Fcode\u003E).\u003C\u002Fp\u003E\n\u003Cp\u003EIf the validate method does not return \u003Ccode\u003Etrue\u003C\u002Fcode\u003E, Nuxt.js will automatically load the 404 error page.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  validate ({ params }) {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Must be a number\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-regexp\"\u003E\u002F^\\d+$\u002F\u003C\u002Fspan\u003E.test(params.id)\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EYou can also check some data in your \u003Ca href=\"\u002Fguide\u002Fvuex-store\"\u003Estore\u003C\u002Fa\u003E for example (filled by \u003Ca href=\"\u002Fguide\u002Fvuex-store#the-nuxtserverinit-action\"\u003E\u003Ccode\u003EnuxtServerInit\u003C\u002Fcode\u003E\u003C\u002Fa\u003E before action):\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  validate ({ params, store }) {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Check if `params.id` is an existing category\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E store.state.categories.some(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003Ecategory\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E category.id === params.id)\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EYou can also throw expected or unexpected errors during validate function execution:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E validate ({ params, store }) {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Throws a 500 internal server error with custom message\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-keyword\"\u003Ethrow\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003EError\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E'Under Construction!'\u003C\u002Fspan\u003E)\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E"},contributors:[]}],fetch:[],mutations:[]});