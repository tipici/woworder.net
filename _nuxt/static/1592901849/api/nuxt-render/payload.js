__NUXT_JSONP__("/api/nuxt-render", {data:[{},{path:"\u002Fvi\u002Fapi\u002Fnuxt-render",section:"api",page:{attrs:{title:"API: nuxt.render(req, res)",description:"You can use Nuxt.js as a middleware for your Node.js server."},body:"\u003Cul\u003E\n\u003Cli\u003EType: \u003Ccode\u003EFunction\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003EArguments:\u003Col\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fnodejs.org\u002Fapi\u002Fhttp.html#http_class_http_incomingmessage\"\u003ERequest\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fnodejs.org\u002Fapi\u002Fhttp.html#http_class_http_serverresponse\"\u003EResponse\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EReturns: \u003Ccode\u003EPromise\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003EYou can use Nuxt.js as a middleware with \u003Ccode\u003Enuxt.render\u003C\u002Fcode\u003E for your node.js server.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003EExample with \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fexpressjs\u002Fexpress\"\u003EExpress\u003C\u002Fa\u003E:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E { loadNuxt, build } = \u003Cspan class=\"hljs-built_in\"\u003Erequire\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E'nuxt'\u003C\u002Fspan\u003E)\n\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E app = \u003Cspan class=\"hljs-built_in\"\u003Erequire\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E'express'\u003C\u002Fspan\u003E)()\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E isDev = process.env.NODE_ENV !== \u003Cspan class=\"hljs-string\"\u003E'production'\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E port = process.env.PORT || \u003Cspan class=\"hljs-number\"\u003E3000\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Estart\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F We get Nuxt instance\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E nuxt = \u003Cspan class=\"hljs-keyword\"\u003Eawait\u003C\u002Fspan\u003E loadNuxt(isDev ? \u003Cspan class=\"hljs-string\"\u003E'dev'\u003C\u002Fspan\u003E : \u003Cspan class=\"hljs-string\"\u003E'start'\u003C\u002Fspan\u003E)\n\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Render every route with Nuxt.js\u003C\u002Fspan\u003E\n  app.use(nuxt.render)\n\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Build only in dev mode with hot-reloading\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (isDev) {\n    build(nuxt)\n  }\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Listen the server\u003C\u002Fspan\u003E\n  app.listen(port, \u003Cspan class=\"hljs-string\"\u003E'0.0.0.0'\u003C\u002Fspan\u003E)\n  \u003Cspan class=\"hljs-built_in\"\u003Econsole\u003C\u002Fspan\u003E.log(\u003Cspan class=\"hljs-string\"\u003E'Server listening on `localhost:'\u003C\u002Fspan\u003E + port + \u003Cspan class=\"hljs-string\"\u003E'`.'\u003C\u002Fspan\u003E)\n}\n\nstart()\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cdiv class=\"Alert\"\u003E\n\n\u003Cp\u003EIt&#39;s recommended to call \u003Ccode\u003Enuxt.render\u003C\u002Fcode\u003E at the end of your middlewares since it will handle the rendering of your web application and won&#39;t call \u003Ccode\u003Enext()\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n"},contributors:[]}],fetch:[],mutations:[]});