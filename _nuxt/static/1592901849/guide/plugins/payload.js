__NUXT_JSONP__("/guide/plugins", {data:[{},{path:"\u002Fvi\u002Fguide\u002Fplugins",section:"guide",page:{attrs:{title:"Plugins",description:"Nuxt.js allows you to define JavaScript plugins to be run before instantiating the root Vue.js Application. This is especially helpful when using your own libraries or external modules."},body:"\u003Cblockquote\u003E\n\u003Cp\u003ENuxt.js allows you to define JavaScript plugins to be run before instantiating the root Vue.js Application. This is especially helpful when using your own libraries or external modules.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cdiv class=\"Alert\"\u003E\n\n\u003Cp\u003EIt is important to know that in any Vue \u003Ca href=\"https:\u002F\u002Fvuejs.org\u002Fv2\u002Fguide\u002Finstance.html#Lifecycle-Diagram\"\u003Einstance lifecycle\u003C\u002Fa\u003E, only \u003Ccode\u003EbeforeCreate\u003C\u002Fcode\u003E and \u003Ccode\u003Ecreated\u003C\u002Fcode\u003E hooks are called \u003Cstrong\u003Eboth, from client-side and server-side\u003C\u002Fstrong\u003E. All other hooks are called only from the client-side.\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\n\u003Ch2 id=\"external-packages\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#external-packages\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EExternal Packages\u003C\u002Fh2\u003E\u003Cp\u003EWe may want to use external packages\u002Fmodules in our application (one great example is \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fmzabriskie\u002Faxios\"\u003Eaxios\u003C\u002Fa\u003E) for making HTTP request for both server and client.\u003C\u002Fp\u003E\n\u003Cp\u003EFirst, we should install it via npm:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Enpm install --save axios\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EThen we can use it directly in our page components:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eh1\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{{ title }}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eh1\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Escript\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"javascript\"\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E axios \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E'axios'\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E asyncData ({ params }) {\n    \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E { data } = \u003Cspan class=\"hljs-keyword\"\u003Eawait\u003C\u002Fspan\u003E axios.get(\u003Cspan class=\"hljs-string\"\u003E`https:\u002F\u002Fmy-api\u002Fposts\u002F\u003Cspan class=\"hljs-subst\"\u003E${params.id}\u003C\u002Fspan\u003E`\u003C\u002Fspan\u003E)\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E { \u003Cspan class=\"hljs-attr\"\u003Etitle\u003C\u002Fspan\u003E: data.title }\n  }\n}\n\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Escript\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2 id=\"vue-plugins\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#vue-plugins\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EVue Plugins\u003C\u002Fh2\u003E\u003Cp\u003EIf we want to use Vue plugins, like \u003Ca href=\"https:\u002F\u002Fakryum.github.io\u002Fv-tooltip\"\u003Ev-tooltip\u003C\u002Fa\u003E to display tooltips in our application, we need to setup the plugin before launching the app.\nFirst we install the plugin\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Enpm install --save v-tooltip\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EWe create the file \u003Ccode\u003Eplugins\u002Fvue-tooltips.js\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E Vue \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E'vue'\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E VTooltip \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E'v-tooltip'\u003C\u002Fspan\u003E\n\nVue.use(VTooltip)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EThen we add the file path inside the \u003Ccode\u003Eplugins\u003C\u002Fcode\u003E key of our \u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003Eplugins\u003C\u002Fspan\u003E: [\u003Cspan class=\"hljs-string\"\u003E'@\u002Fplugins\u002Fvue-tooltip.js'\u003C\u002Fspan\u003E]\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003ETo learn more about the \u003Ccode\u003Eplugins\u003C\u002Fcode\u003E configuration key, check out the \u003Ca href=\"\u002Fapi\u002Fconfiguration-plugins\"\u003Eplugins api\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\u003Ch3 id=\"es6-plugins\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#es6-plugins\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EES6 plugins\u003C\u002Fh3\u003E\u003Cp\u003EIf the plugin is located in \u003Ccode\u003Enode_modules\u003C\u002Fcode\u003E and exports an ES6 module, you may need to add it to the \u003Ccode\u003Etranspile\u003C\u002Fcode\u003E build option:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-built_in\"\u003Emodule\u003C\u002Fspan\u003E.exports = {\n  \u003Cspan class=\"hljs-attr\"\u003Ebuild\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003Etranspile\u003C\u002Fspan\u003E: [\u003Cspan class=\"hljs-string\"\u003E'vue-notifications'\u003C\u002Fspan\u003E]\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EYou can refer to the \u003Ca href=\"\u002Fapi\u002Fconfiguration-build\u002F#transpile\"\u003Econfiguration build\u003C\u002Fa\u003E docs for more build options.\u003C\u002Fp\u003E\n\u003Ch2 id=\"inject-in-root-amp-context\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#inject-in-root-amp-context\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EInject in $root &amp; context\u003C\u002Fh2\u003E\u003Cp\u003ESometimes you want to make functions or values available across the app.\nYou can inject those variables into Vue instances (client side), the context (server side) and even in the Vuex store.\nIt is a convention to prefix those functions with a \u003Ccode\u003E$\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\u003Ch3 id=\"inject-into-vue-instances\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#inject-into-vue-instances\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EInject into Vue instances\u003C\u002Fh3\u003E\u003Cp\u003EInjecting context into Vue instances works similar to when doing this in standard Vue apps.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Eplugins\u002Fvue-inject.js\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E Vue \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E'vue'\u003C\u002Fspan\u003E\n\nVue.prototype.$myInjectedFunction = \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003Estring\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003Econsole\u003C\u002Fspan\u003E.log(\u003Cspan class=\"hljs-string\"\u003E'This is an example'\u003C\u002Fspan\u003E, string)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003Eplugins\u003C\u002Fspan\u003E: [\u003Cspan class=\"hljs-string\"\u003E'~\u002Fplugins\u002Fvue-inject.js'\u003C\u002Fspan\u003E]\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EYou can now use the function in all your Vue components.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Eexample-component.vue\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  mounted () {\n    \u003Cspan class=\"hljs-keyword\"\u003Ethis\u003C\u002Fspan\u003E.$myInjectedFunction(\u003Cspan class=\"hljs-string\"\u003E'test'\u003C\u002Fspan\u003E)\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3 id=\"inject-into-context\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#inject-into-context\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EInject into context\u003C\u002Fh3\u003E\u003Cp\u003EInjecting context into Vue instances works similar to when doing this in standard Vue apps.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Eplugins\u002Fctx-inject.js\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E ({ app }, inject) =&gt; {\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Set the function directly on the context.app object\u003C\u002Fspan\u003E\n  app.myInjectedFunction = \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003Estring\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003Econsole\u003C\u002Fspan\u003E.log(\u003Cspan class=\"hljs-string\"\u003E'Okay, another function'\u003C\u002Fspan\u003E, string)\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003Eplugins\u003C\u002Fspan\u003E: [\u003Cspan class=\"hljs-string\"\u003E'~\u002Fplugins\u002Fctx-inject.js'\u003C\u002Fspan\u003E]\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EThe function is now available whenever you have access to the \u003Ccode\u003Econtext\u003C\u002Fcode\u003E (for example in \u003Ccode\u003EasyncData\u003C\u002Fcode\u003E and \u003Ccode\u003Efetch\u003C\u002Fcode\u003E).\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Ectx-example-component.vue\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  asyncData (context) {\n    context.app.myInjectedFunction(\u003Cspan class=\"hljs-string\"\u003E'ctx!'\u003C\u002Fspan\u003E)\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3 id=\"combined-inject\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#combined-inject\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003ECombined inject\u003C\u002Fh3\u003E\u003Cp\u003EIf you need the function in the \u003Ccode\u003Econtext\u003C\u002Fcode\u003E, Vue instances and maybe even in the Vuex store, you can use the \u003Ccode\u003Einject\u003C\u002Fcode\u003E function, which is the second parameter of the plugins exported function.\u003C\u002Fp\u003E\n\u003Cp\u003EInjecting content into Vue instances works similar to when doing this in standard Vue apps. The \u003Ccode\u003E$\u003C\u002Fcode\u003E will be prepended automatically to the function.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Eplugins\u002Fcombined-inject.js\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E ({ app }, inject) =&gt; {\n  inject(\u003Cspan class=\"hljs-string\"\u003E'myInjectedFunction'\u003C\u002Fspan\u003E, string =&gt; \u003Cspan class=\"hljs-built_in\"\u003Econsole\u003C\u002Fspan\u003E.log(\u003Cspan class=\"hljs-string\"\u003E'That was easy!'\u003C\u002Fspan\u003E, string))\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003Eplugins\u003C\u002Fspan\u003E: [\u003Cspan class=\"hljs-string\"\u003E'~\u002Fplugins\u002Fcombined-inject.js'\u003C\u002Fspan\u003E]\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003ENow the function can be used from \u003Ccode\u003Econtext\u003C\u002Fcode\u003E, via \u003Ccode\u003Ethis\u003C\u002Fcode\u003E in Vue instances and via \u003Ccode\u003Ethis\u003C\u002Fcode\u003E in store \u003Ccode\u003Eactions\u003C\u002Fcode\u003E\u002F\u003Ccode\u003Emutations\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Ectx-example-component.vue\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  mounted () {\n    \u003Cspan class=\"hljs-keyword\"\u003Ethis\u003C\u002Fspan\u003E.$myInjectedFunction(\u003Cspan class=\"hljs-string\"\u003E'works in mounted'\u003C\u002Fspan\u003E)\n  },\n  asyncData (context) {\n    context.app.$myInjectedFunction(\u003Cspan class=\"hljs-string\"\u003E'works with context'\u003C\u002Fspan\u003E)\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Ccode\u003Estore\u002Findex.js\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E state = \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003E()\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E ({\n  \u003Cspan class=\"hljs-attr\"\u003EsomeValue\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E''\u003C\u002Fspan\u003E\n})\n\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E mutations = {\n  changeSomeValue (state, newValue) {\n    \u003Cspan class=\"hljs-keyword\"\u003Ethis\u003C\u002Fspan\u003E.$myInjectedFunction(\u003Cspan class=\"hljs-string\"\u003E'accessible in mutations'\u003C\u002Fspan\u003E)\n    state.someValue = newValue\n  }\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E actions = {\n  setSomeValueToWhatever ({ commit }) {\n    \u003Cspan class=\"hljs-keyword\"\u003Ethis\u003C\u002Fspan\u003E.$myInjectedFunction(\u003Cspan class=\"hljs-string\"\u003E'accessible in actions'\u003C\u002Fspan\u003E)\n    \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E newValue = \u003Cspan class=\"hljs-string\"\u003E'whatever'\u003C\u002Fspan\u003E\n    commit(\u003Cspan class=\"hljs-string\"\u003E'changeSomeValue'\u003C\u002Fspan\u003E, newValue)\n  }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cdiv class=\"Alert\"\u003E\n\n\u003Cp\u003EBe ware, do not use Vue plugins inside exported functions. exported functions called before each request,\nso calling \u003Ccode\u003EVue.use(...)\u003C\u002Fcode\u003E, \u003Ccode\u003EVue.mixin(...)\u003C\u002Fcode\u003E, \u003Ccode\u003EVue.component(...)\u003C\u002Fcode\u003E, cause your app crash after too many requests.\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Ch2 id=\"client-side-only\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#client-side-only\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EClient-side only\u003C\u002Fh2\u003E\u003Cp\u003ESome plugins might work \u003Cstrong\u003Eonly in the browser\u003C\u002Fstrong\u003E because they lack SSR support.\nIn these situations you can use the \u003Ccode\u003Emode\u003C\u002Fcode\u003E: \u003Ccode\u003Eclient\u003C\u002Fcode\u003E option in \u003Ccode\u003Eplugins\u003C\u002Fcode\u003E to add the plugin only on the client-side.\u003C\u002Fp\u003E\n\u003Cp\u003EExample:\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003Eplugins\u003C\u002Fspan\u003E: [\n    { \u003Cspan class=\"hljs-attr\"\u003Esrc\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E'~\u002Fplugins\u002Fvue-notifications'\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-attr\"\u003Emode\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E'client'\u003C\u002Fspan\u003E }\n  ]\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Ccode\u003Eplugins\u002Fvue-notifications.js\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E Vue \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E'vue'\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E VueNotifications \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E'vue-notifications'\u003C\u002Fspan\u003E\n\nVue.use(VueNotifications)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EIn case you need to import some libraries in a plugin only on \u003Cem\u003Eserver-side\u003C\u002Fem\u003E, you can check if the \u003Ccode\u003Eprocess.server\u003C\u002Fcode\u003E variable is set to \u003Ccode\u003Etrue\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\u003Cp\u003EAlso, if you need to know if you are inside a generated app (via \u003Ccode\u003Enuxt generate\u003C\u002Fcode\u003E), you can check if \u003Ccode\u003Eprocess.static\u003C\u002Fcode\u003E is set to \u003Ccode\u003Etrue\u003C\u002Fcode\u003E. This is only the case during and after the generation.\u003C\u002Fp\u003E\n\u003Cp\u003EYou can also combine both options to hit the spot when a page is being server-rendered by \u003Ccode\u003Enuxt generate\u003C\u002Fcode\u003E before being saved (\u003Ccode\u003Eprocess.static &amp;&amp; process.server\u003C\u002Fcode\u003E).\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003ENote\u003C\u002Fstrong\u003E: Since Nuxt.js 2.4, \u003Ccode\u003Emode\u003C\u002Fcode\u003E has been introduced as option of \u003Ccode\u003Eplugins\u003C\u002Fcode\u003E to specify plugin type, possible value are: \u003Ccode\u003Eclient\u003C\u002Fcode\u003E or \u003Ccode\u003Eserver\u003C\u002Fcode\u003E. \u003Ccode\u003Essr: false\u003C\u002Fcode\u003E will be adapted to \u003Ccode\u003Emode: &#39;client&#39;\u003C\u002Fcode\u003E and deprecated in next major release.\u003C\u002Fp\u003E\n\u003Cp\u003EExample:\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003Eplugins\u003C\u002Fspan\u003E: [\n    { \u003Cspan class=\"hljs-attr\"\u003Esrc\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E'~\u002Fplugins\u002Fboth-sides.js'\u003C\u002Fspan\u003E },\n    { \u003Cspan class=\"hljs-attr\"\u003Esrc\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E'~\u002Fplugins\u002Fclient-only.js'\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-attr\"\u003Emode\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E'client'\u003C\u002Fspan\u003E },\n    { \u003Cspan class=\"hljs-attr\"\u003Esrc\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E'~\u002Fplugins\u002Fserver-only.js'\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-attr\"\u003Emode\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E'server'\u003C\u002Fspan\u003E }\n  ]\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3 id=\"name-conventional-plugin\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#name-conventional-plugin\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EName conventional plugin\u003C\u002Fh3\u003E\u003Cp\u003EIf plugin is assumed to be run only in client or server side, \u003Ccode\u003E.client.js\u003C\u002Fcode\u003E or \u003Ccode\u003E.server.js\u003C\u002Fcode\u003E can be applied as extension of plugin file, the file will be automatically included in corresponding side.\u003C\u002Fp\u003E\n\u003Cp\u003EExample:\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003Eplugins\u003C\u002Fspan\u003E: [\n    \u003Cspan class=\"hljs-string\"\u003E'~\u002Fplugins\u002Ffoo.client.js'\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F only in client side\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-string\"\u003E'~\u002Fplugins\u002Fbar.server.js'\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F only in server side\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-string\"\u003E'~\u002Fplugins\u002Fbaz.js'\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F both client &amp; server\u003C\u002Fspan\u003E\n  ]\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E"},contributors:[]}],fetch:[],mutations:[]});