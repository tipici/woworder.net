__NUXT_JSONP__("/guide/assets", {data:[{},{path:"\u002Fvi\u002Fguide\u002Fassets",section:"guide",page:{attrs:{title:"Assets",description:"By default, Nuxt uses vue-loader, file-loader and url-loader webpack loaders for strong assets serving. You can also use Static directory for static assets."},body:"\u003Cblockquote\u003E\n\u003Cp\u003EBy default, Nuxt uses vue-loader, file-loader and url-loader webpack loaders for strong assets serving. You can also use the \u003Ccode\u003Estatic\u003C\u002Fcode\u003E directory for static assets.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch2 id=\"webpack\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#webpack\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EWebpack\u003C\u002Fh2\u003E\u003Cp\u003E\u003Ca href=\"http:\u002F\u002Fvue-loader.vuejs.org\u002F\"\u003Evue-loader\u003C\u002Fa\u003E automatically processes your style and template files with \u003Ccode\u003Ecss-loader\u003C\u002Fcode\u003E and the Vue template compiler out of the box.\nIn this compilation process, all asset URLs such as \u003Ccode\u003E&lt;img src=&quot;...&quot;&gt;\u003C\u002Fcode\u003E, \u003Ccode\u003Ebackground: url(...)\u003C\u002Fcode\u003E and CSS \u003Ccode\u003E@import\u003C\u002Fcode\u003E are resolved as module dependencies.\u003C\u002Fp\u003E\n\u003Cp\u003EFor example, we have this file tree:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003E-| assets\u002F\n----| image.png\n-| pages\u002F\n----| index.vue\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EIf you use \u003Ccode\u003Eurl(&#39;~assets\u002Fimage.png&#39;)\u003C\u002Fcode\u003E in your CSS, it will be \u003Cem\u003Etranslated\u003C\u002Fem\u003E into \u003Ccode\u003Erequire(&#39;~\u002Fassets\u002Fimage.png&#39;)\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\u003Cdiv class=\"Alert Alert--orange\"\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EWarning:\u003C\u002Fstrong\u003E Starting from Nuxt 2.0 the \u003Ccode\u003E~\u002F\u003C\u002Fcode\u003E alias won&#39;t be resolved correctly in your CSS files.\nYou must use \u003Ccode\u003E~assets\u003C\u002Fcode\u003E (without a slash) or the \u003Ccode\u003E@\u003C\u002Fcode\u003E alias in \u003Ccode\u003Eurl\u003C\u002Fcode\u003E CSS references, i.e. \u003Ccode\u003Ebackground: url(&quot;~assets\u002Fbanner.svg&quot;)\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cp\u003EOr if you reference that image in your \u003Ccode\u003Epages\u002Findex.vue\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eimg\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Esrc\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\"~\u002Fassets\u002Fimage.png\"\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EIt will be compiled into:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003EcreateElement(\u003Cspan class=\"hljs-string\"\u003E'img'\u003C\u002Fspan\u003E, { \u003Cspan class=\"hljs-attr\"\u003Eattrs\u003C\u002Fspan\u003E: { \u003Cspan class=\"hljs-attr\"\u003Esrc\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Erequire\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E'~\u002Fassets\u002Fimage.png'\u003C\u002Fspan\u003E) } })\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EBecause \u003Ccode\u003E.png\u003C\u002Fcode\u003E is not a JavaScript file, Nuxt.js configures webpack to use \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fwebpack\u002Ffile-loader\"\u003Efile-loader\u003C\u002Fa\u003E and \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fwebpack\u002Furl-loader\"\u003Eurl-loader\u003C\u002Fa\u003E to handle them for you.\u003C\u002Fp\u003E\n\u003Cp\u003EThe benefits of these loaders are:\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003Efile-loader\u003C\u002Fcode\u003E lets you designate where to copy and place the asset file, and how to name it using version hashes for better caching. In production, you will benefit from long-term caching by default!\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Eurl-loader\u003C\u002Fcode\u003E allows you to conditionally inline a file as base-64 data URL if they are smaller than a given threshold. This can reduce a number of HTTP requests for trivial files. If the file is larger than the threshold, it automatically falls back to file-loader.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003EFor those two loaders, the default configuration is:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F https:\u002F\u002Fgithub.com\u002Fnuxt\u002Fnuxt.js\u002Fblob\u002Fdev\u002Fpackages\u002Fwebpack\u002Fsrc\u002Fconfig\u002Fbase.js#L297-L316\u003C\u002Fspan\u003E\n[\n  {\n    \u003Cspan class=\"hljs-attr\"\u003Etest\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-regexp\"\u003E\u002F\\.(png|jpe?g|gif|svg|webp)$\u002F\u003C\u002Fspan\u003E,\n    loader: \u003Cspan class=\"hljs-string\"\u003E'url-loader'\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003Equery\u003C\u002Fspan\u003E: {\n      \u003Cspan class=\"hljs-attr\"\u003Elimit\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E1000\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 1kB\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E'img\u002F[name].[hash:7].[ext]'\u003C\u002Fspan\u003E\n    }\n  },\n  {\n    \u003Cspan class=\"hljs-attr\"\u003Etest\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-regexp\"\u003E\u002F\\.(woff2?|eot|ttf|otf)(\\?.*)?$\u002F\u003C\u002Fspan\u003E,\n    loader: \u003Cspan class=\"hljs-string\"\u003E'url-loader'\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003Equery\u003C\u002Fspan\u003E: {\n      \u003Cspan class=\"hljs-attr\"\u003Elimit\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E1000\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 1kB\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E'fonts\u002F[name].[hash:7].[ext]'\u003C\u002Fspan\u003E\n    }\n  }\n]\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EWhich means that every file below 1 KB will be inlined as base-64 data URL.\nOtherwise, the image\u002Ffont will be copied in its corresponding folder (under the \u003Ccode\u003E.nuxt\u003C\u002Fcode\u003E directory)\nwith a name containing a version hash for better caching.\u003C\u002Fp\u003E\n\u003Cp\u003EWhen launching our application with \u003Ccode\u003Enuxt\u003C\u002Fcode\u003E, our template in \u003Ccode\u003Epages\u002Findex.vue\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eimg\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Esrc\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\"~\u002Fassets\u002Fimage.png\"\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EWill be transformed into:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eimg\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Esrc\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\"\u002F_nuxt\u002Fimg\u002Fimage.0c61159.png\"\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EIf you want to change the loader configurations, please use \u003Ca href=\"\u002Fapi\u002Fconfiguration-build#extend\"\u003Ebuild.extend\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\u003Ch2 id=\"static\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#static\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EStatic\u003C\u002Fh2\u003E\u003Cp\u003EIf you don&#39;t want to use Webpack assets from the \u003Ccode\u003Eassets\u003C\u002Fcode\u003E directory, you can create and use the \u003Ccode\u003Estatic\u003C\u002Fcode\u003E directory (in your project root folder).\u003C\u002Fp\u003E\n\u003Cp\u003EAll included files will be automatically served by Nuxt and are accessible through your project root URL. (\u003Ccode\u003Estatic\u002Ffavicon.ico\u003C\u002Fcode\u003E will be available at \u003Ccode\u003Elocalhost:3000\u002Ffavicon.ico\u003C\u002Fcode\u003E)\u003C\u002Fp\u003E\n\u003Cp\u003EThis option is helpful for files like \u003Ccode\u003Erobots.txt\u003C\u002Fcode\u003E, \u003Ccode\u003Esitemap.xml\u003C\u002Fcode\u003E or \u003Ccode\u003ECNAME\u003C\u002Fcode\u003E (which is important for GitHub Pages deployment).\u003C\u002Fp\u003E\n\u003Cp\u003EIn your code, you can then reference these files relative to the root (\u003Ccode\u003E\u002F\u003C\u002Fcode\u003E):\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-comment\"\u003E&lt;!-- Static image from static directory --&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eimg\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Esrc\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\"\u002Fmy-image.png\"\u003C\u002Fspan\u003E\u002F&gt;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-comment\"\u003E&lt;!-- webpacked image from assets directory --&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eimg\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Esrc\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\"~\u002Fassets\u002Fmy-image-2.png\"\u003C\u002Fspan\u003E\u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E"},contributors:[]}],fetch:[],mutations:[]});