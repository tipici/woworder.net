__NUXT_JSONP__("/blog/understanding-how-fetch-works-in-nuxt-2-12", {data:[{path:"\u002Fvi\u002Fblog\u002Funderstanding-how-fetch-works-in-nuxt-2-12",post:{path:"vi\u002Fblog\u002Funderstanding-how-fetch-works-in-nuxt-2-12.md",slug:"understanding-how-fetch-works-in-nuxt-2-12",readtime:{text:"17 min read",minutes:16.06,time:963599.9999999999,words:3212},title:"Understanding how fetch works in Nuxt 2.12",description:"Explore different features of the fetch hook and learn a brand new way to bring data into Nuxt applications.",imgUrl:"blog\u002Funderstanding-how-fetch-works-in-nuxt-2-12\u002Fmain.png",date:"2020-04-06T00:00:00.000Z",authors:[{name:"Krutie Patel",avatarUrl:"https:\u002F\u002Fpbs.twimg.com\u002Fprofile_images\u002F780651635932434432\u002FYtbSkumD_400x400.jpg",link:"https:\u002F\u002Ftwitter.com\u002FKrutiePatel"}],tags:["Nuxt","Fetch","Asynchronous Data Fetching","API"],body:"\u003Cp\u003ENuxt introduces a new \u003Ccode\u003Efetch\u003C\u002Fcode\u003E with the latest release of version 2.12. Fetch provides a brand new way to bring data into Nuxt applications.\u003C\u002Fp\u003E\n\u003Cp\u003EIn this post, we will explore different features of the fetch hook and try to understand how it works.\u003C\u002Fp\u003E\n\u003Ch2 id=\"fetch-hook-and-nuxt-lifecycle\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#fetch-hook-and-nuxt-lifecycle\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EFetch Hook and Nuxt Lifecycle\u003C\u002Fh2\u003E\u003Cp\u003EIn terms of Nuxt lifecycle hooks, \u003Ccode\u003Efetch\u003C\u002Fcode\u003E sits within Vue lifecycle after \u003Ccode\u003Ecreated\u003C\u002Fcode\u003E hook. As we already know that, all Vue lifecycle hooks are called with their \u003Ccode\u003Ethis\u003C\u002Fcode\u003E context. The same applies to \u003Ccode\u003Efetch\u003C\u002Fcode\u003E hook as well.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"\u002Fblog\u002Funderstanding-how-fetch-works-in-nuxt-2-12\u002Fnew-fetch-lifecycle-hooks.png\" alt=\"New fetch in Nuxt lifecycle\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003EFetch hook is called after the component instance is created on the server-side. That makes \u003Ccode\u003Ethis\u003C\u002Fcode\u003E context available inside the \u003Ccode\u003Efetch\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  fetch() {\n    \u003Cspan class=\"hljs-built_in\"\u003Econsole\u003C\u002Fspan\u003E.log(\u003Cspan class=\"hljs-keyword\"\u003Ethis\u003C\u002Fspan\u003E);\n  }\n};\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003ELet’s see what this could mean for page components.\u003C\u002Fp\u003E\n\u003Ch3 id=\"page-components\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#page-components\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EPage Components\u003C\u002Fh3\u003E\u003Cp\u003EWith the help of \u003Ccode\u003Ethis\u003C\u002Fcode\u003E context, fetch is able to mutate component’s data directly. It means we can set the component’s local data without having to dispatch Vuex store action or committing mutation from the page component.\u003C\u002Fp\u003E\n\u003Cp\u003EAs a result, Vuex becomes optional, but not impossible. We can still use \u003Ccode\u003Ethis.$store\u003C\u002Fcode\u003E as usual to access Vuex store if required.\u003C\u002Fp\u003E\n\u003Ch2 id=\"availability-of-fetch-hook\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#availability-of-fetch-hook\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EAvailability of fetch hook\u003C\u002Fh2\u003E\u003Cp\u003EWith \u003Ccode\u003Efetch\u003C\u002Fcode\u003E, we can pre-fetch the data asynchronously \u003Cstrong\u003Ein any Vue components\u003C\u002Fstrong\u003E. It means, other than page components found in \u003Ccode\u003E\u002Fpages\u003C\u002Fcode\u003E directory, every other \u003Ccode\u003E.vue\u003C\u002Fcode\u003E components found in \u003Ccode\u003E\u002Flayouts\u003C\u002Fcode\u003E and \u003Ccode\u003E\u002Fcomponents\u003C\u002Fcode\u003E directories can also benefit from the fetch hook.\u003C\u002Fp\u003E\n\u003Cp\u003ELet&#39;s see what this could mean for layout and building-block components.\u003C\u002Fp\u003E\n\u003Ch3 id=\"layout-components\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#layout-components\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003ELayout Components\u003C\u002Fh3\u003E\u003Cp\u003EUsing new \u003Ccode\u003Efetch\u003C\u002Fcode\u003E, now we can make API calls directly from the layout components. This was impossible prior to the release of v2.12.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003EPossible use cases\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003EFetch config data from the back-end in Nuxt layouts to generate footer and navbar dynamically\u003C\u002Fli\u003E\n\u003Cli\u003EFetch user related data (i.e. user profile, shopping-cart item count) in the navbar\u003C\u002Fli\u003E\n\u003Cli\u003EFetch site relevant data on \u003Ccode\u003Elayouts\u002Ferror.vue\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3 id=\"building-block-child-nested-components\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#building-block-child-nested-components\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EBuilding-block (Child\u002FNested) Components\u003C\u002Fh3\u003E\u003Cp\u003EWith \u003Ccode\u003Efetch\u003C\u002Fcode\u003E hook available in child components as well, we can off-load some of the data-fetching tasks from page-level components, and delegate them over to nested components. This was also impossible prior to the release of v2.12.\u003C\u002Fp\u003E\n\u003Cp\u003EThis reduces the responsibility of route-level components to a great extent.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003EPossible use case -\u003C\u002Fstrong\u003E We can still pass props to child components, but if the child components need to have their own data-fetching logic, now they can!\u003C\u002Fp\u003E\n\u003Ch2 id=\"call-order-of-multiple-fetch-hooks\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#call-order-of-multiple-fetch-hooks\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003ECall order of multiple fetch hooks\u003C\u002Fh2\u003E\u003Cp\u003ESince each component can have its own data-fetching logic, you may ask what would be the order in which each of them are called?\u003C\u002Fp\u003E\n\u003Cp\u003EFetch hook is called on server-side once (on the first request to the Nuxt app) and then on client-side when navigating to further routes. But since we can define one fetch hook for each component, fetch hooks are called in sequence of their hierarchy.\u003C\u002Fp\u003E\n\u003Ch3 id=\"disabling-fetch-on-server-side\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#disabling-fetch-on-server-side\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EDisabling fetch on server-side\u003C\u002Fh3\u003E\u003Cp\u003EIn addition, we can even disable fetch on the server-side if required.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003EfetchOnServer\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E\n};\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EAnd this way, the fetch hook will only be called on client-side. When \u003Ccode\u003EfetchOnServer\u003C\u002Fcode\u003E is set to false, \u003Ccode\u003E$fetchState.pending\u003C\u002Fcode\u003E becomes \u003Ccode\u003Etrue\u003C\u002Fcode\u003E when the component is rendered on server-side.\u003C\u002Fp\u003E\n\u003Ch2 id=\"error-handling\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#error-handling\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EError Handling\u003C\u002Fh2\u003E\u003Cp\u003ENew \u003Ccode\u003Efetch\u003C\u002Fcode\u003E handles error at component level. Let’s see how.\u003C\u002Fp\u003E\n\u003Cp\u003EBecause we’re fetching data asynchronously, the new fetch() provides a \u003Ccode\u003E$fetchState\u003C\u002Fcode\u003E object to check whether the request has finished and progressed successfully.\u003C\u002Fp\u003E\n\u003Cp\u003EBelow is what the \u003Ccode\u003E$fetchState\u003C\u002Fcode\u003E object looks like.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs \"\u003E$fetchState = {\n  pending: true | false,\n  error: null | {},\n  timestamp: Integer\n};\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EWe have three keys,\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E\u003Cstrong\u003EPending -\u003C\u002Fstrong\u003E lets you display a placeholder when fetch is being called on client-side\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003EError -\u003C\u002Fstrong\u003E lets you show an error message\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003ETimestamp -\u003C\u002Fstrong\u003E shows timestamp of the last fetch which is useful for caching with \u003Ccode\u003Ekeep-alive\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003EThese keys are then used directly in the template area of the component to show relevant placeholders during the process of fetching data from the API.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Ev-if\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\"$fetchState.pending\"\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003EFetching posts...\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Ev-else-if\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\"$fetchState.error\"\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003EError while fetching posts\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eul\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Ev-else\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n      …\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eul\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EWhen error occurs at \u003Cstrong\u003Ecomponent-level\u003C\u002Fstrong\u003E, we can set HTTP status code on server-side by checking \u003Ccode\u003Eprocess.server\u003C\u002Fcode\u003E in fetch hook and follow it up with \u003Ccode\u003Ethrow new Error()\u003C\u002Fcode\u003E statement.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E fetch() {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E post = \u003Cspan class=\"hljs-keyword\"\u003Eawait\u003C\u002Fspan\u003E fetch(\u003Cspan class=\"hljs-string\"\u003E`https:\u002F\u002Fjsonplaceholder.typicode.com\u002Fposts\u002F\u003Cspan class=\"hljs-subst\"\u003E${\u003Cspan class=\"hljs-keyword\"\u003Ethis\u003C\u002Fspan\u003E.$route.params.id}\u003C\u002Fspan\u003E`\u003C\u002Fspan\u003E)\n                     .then(\u003Cspan class=\"hljs-function\"\u003E(\u003Cspan class=\"hljs-params\"\u003Eres\u003C\u002Fspan\u003E) =&gt;\u003C\u002Fspan\u003E res.json())\n\n  \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (post.id === \u003Cspan class=\"hljs-keyword\"\u003Ethis\u003C\u002Fspan\u003E.$route.params.id) {\n      \u003Cspan class=\"hljs-keyword\"\u003Ethis\u003C\u002Fspan\u003E.post = post\n    } \u003Cspan class=\"hljs-keyword\"\u003Eelse\u003C\u002Fspan\u003E {\n      \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F set status code on server and\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (process.server) {\n        \u003Cspan class=\"hljs-keyword\"\u003Ethis\u003C\u002Fspan\u003E.$nuxt.context.res.statusCode = \u003Cspan class=\"hljs-number\"\u003E404\u003C\u002Fspan\u003E\n      }\n      \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F use throw new Error()\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-keyword\"\u003Ethrow\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003EError\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E'Post not found'\u003C\u002Fspan\u003E)\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003ESetting the HTTP status code this way \u003Cstrong\u003Eis useful for correct SEO\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\u003Ch2 id=\"fetch-as-a-method\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#fetch-as-a-method\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EFetch as a method\u003C\u002Fh2\u003E\u003Cp\u003ENew fetch hook also acts as a method that can be invoked upon user interaction or invoked programmatically from the component methods.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-comment\"\u003E&lt;!-- from template in template  --&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E @\u003Cspan class=\"hljs-attr\"\u003Eclick\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\"$fetch\"\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003ERefresh Data\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F from component methods in script section\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003Emethods\u003C\u002Fspan\u003E: {\n    refresh() {\n      \u003Cspan class=\"hljs-keyword\"\u003Ethis\u003C\u002Fspan\u003E.$fetch();\n    }\n  }\n};\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2 id=\"making-nuxt-pages-more-performant\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#making-nuxt-pages-more-performant\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EMaking Nuxt pages more performant\u003C\u002Fh2\u003E\u003Cp\u003EWe can use \u003Ccode\u003E:keep-alive-props\u003C\u002Fcode\u003E prop and \u003Ccode\u003Eactivated\u003C\u002Fcode\u003E hook to make Nuxt page components more performant using a new fetch hook.\u003C\u002Fp\u003E\n\u003Cp\u003ENuxt allows \u003Cstrong\u003Ecaching a certain number of pages\u003C\u002Fstrong\u003E in the memory along with their fetched data. And also allows \u003Cstrong\u003Eadding a number of seconds\u003C\u002Fstrong\u003E before we can re-fetch the data.\u003C\u002Fp\u003E\n\u003Cp\u003EFor any of the above methods to work, we have to use the \u003Ccode\u003Ekeep-alive\u003C\u002Fcode\u003E prop in generic \u003Ccode\u003E&lt;nuxt \u002F&gt;\u003C\u002Fcode\u003E and \u003Ccode\u003E&lt;nuxt-child\u003C\u002Fcode\u003E&gt; components.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-comment\"\u003E&lt;!-- layouts\u002Fdefault.vue --&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Enuxt\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Ekeep-alive\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EIn addition, we can pass \u003Ccode\u003E:keep-alive-props\u003C\u002Fcode\u003E to \u003Ccode\u003E&lt;nuxt \u002F&gt;\u003C\u002Fcode\u003E component to cache a number of pages along with their fetched data.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003E:keep-alive-props\u003C\u002Fcode\u003E prop allow us to indicate the maximum number of pages that should be kept in the memory while we navigate elsewhere within the site.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-comment\"\u003E&lt;!-- layouts\u002Fdefault.vue --&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Enuxt\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Ekeep-alive\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:keep-alive-props\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E\"{ max: 10 }\"\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EAbove is one way to boost page performance which is more high-level and generic, while the next one drills down to optimise the fetch request calls by using the \u003Ccode\u003Etimestamp\u003C\u002Fcode\u003E property of \u003Ccode\u003E$fetchState\u003C\u002Fcode\u003E and comparing it against the number of seconds delay before it re-fetches the data.\u003C\u002Fp\u003E\n\u003Cp\u003EVue’s \u003Ccode\u003Eactivated\u003C\u002Fcode\u003E hook is used here with Nuxt&#39;s \u003Ccode\u003Ekeep-alive\u003C\u002Fcode\u003E prop to re-fetch the data.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  activated() {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Call fetch again if last fetch more than a minute ago\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-keyword\"\u003Ethis\u003C\u002Fspan\u003E.$fetchState.timestamp &lt;= \u003Cspan class=\"hljs-built_in\"\u003EDate\u003C\u002Fspan\u003E.now() - \u003Cspan class=\"hljs-number\"\u003E60000\u003C\u002Fspan\u003E) {\n      \u003Cspan class=\"hljs-keyword\"\u003Ethis\u003C\u002Fspan\u003E.$fetch();\n    }\n  }\n};\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2 id=\"asyncdata-vs-fetch\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#asyncdata-vs-fetch\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EasyncData vs Fetch\u003C\u002Fh2\u003E\u003Cp\u003EAs far as page components are concerned, new \u003Ccode\u003Efetch\u003C\u002Fcode\u003E seems way too similar to \u003Ccode\u003EasyncData()\u003C\u002Fcode\u003E because they both deal with the local data. But there are some key differences worth taking note of as below.\u003C\u002Fp\u003E\n\u003Cp\u003EAs of Nuxt 2.12, \u003Ccode\u003EasyncData\u003C\u002Fcode\u003E method is still an active feature. Let’s examine some of the key differences between \u003Ccode\u003EasyncData\u003C\u002Fcode\u003E and new \u003Ccode\u003Efetch\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\u003Ch3 id=\"asyncdata\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#asyncdata\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EAsyncData\u003C\u002Fh3\u003E\u003Col\u003E\n\u003Cli\u003E\u003Ccode\u003EasyncData\u003C\u002Fcode\u003E is limited to only page-level components\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Ethis\u003C\u002Fcode\u003E context is unavailable\u003C\u002Fli\u003E\n\u003Cli\u003EAdds payload by \u003Cstrong\u003Ereturning\u003C\u002Fstrong\u003E the data\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E asyncData(context) {\n    \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E data = \u003Cspan class=\"hljs-keyword\"\u003Eawait\u003C\u002Fspan\u003E context.$axios.$get(\n      \u003Cspan class=\"hljs-string\"\u003E`https:\u002F\u002Fjsonplaceholder.typicode.com\u002Ftodos`\u003C\u002Fspan\u003E\n    );\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F `todos` does not have to be declared in data()\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E { \u003Cspan class=\"hljs-attr\"\u003Etodos\u003C\u002Fspan\u003E: data.Item };\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F `todos` is merged with local data\u003C\u002Fspan\u003E\n  }\n};\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3 id=\"new-fetch\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#new-fetch\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003ENew Fetch\u003C\u002Fh3\u003E\u003Col\u003E\n\u003Cli\u003E\u003Ccode\u003Efetch\u003C\u002Fcode\u003E is available in all Vue components\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Ethis\u003C\u002Fcode\u003E context is available\u003C\u002Fli\u003E\n\u003Cli\u003ESimply \u003Cstrong\u003Emutates\u003C\u002Fstrong\u003E the local data\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  data() {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E {\n      \u003Cspan class=\"hljs-attr\"\u003Etodos\u003C\u002Fspan\u003E: []\n    };\n  },\n  \u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E fetch() {\n    \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E { data } = \u003Cspan class=\"hljs-keyword\"\u003Eawait\u003C\u002Fspan\u003E axios.get(\n      \u003Cspan class=\"hljs-string\"\u003E`https:\u002F\u002Fjsonplaceholder.typicode.com\u002Ftodos`\u003C\u002Fspan\u003E\n    );\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F `todos` has to be declared in data()\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-keyword\"\u003Ethis\u003C\u002Fspan\u003E.todos = data;\n  }\n};\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2 id=\"fetch-before-nuxt-2-12\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#fetch-before-nuxt-2-12\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EFetch before Nuxt 2.12\u003C\u002Fh2\u003E\u003Cp\u003EIf you have been working with Nuxt for a while, then you’ll know that the previous version of \u003Ccode\u003Efetch\u003C\u002Fcode\u003E was significantly different.\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003EIs this a breaking change?\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003ENo, it isn&#39;t. Actually, the old fetch can still be used by passing the \u003Ccode\u003Econtext\u003C\u002Fcode\u003E as the first argument to avoid any breaking changes in your existing Nuxt applications.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003EHere’s the list of notable changes in \u003Ccode\u003Efetch\u003C\u002Fcode\u003E hook compared with \u003Cstrong\u003Ebefore\u003C\u002Fstrong\u003E and \u003Cstrong\u003Eafter\u003C\u002Fstrong\u003E v2.12.\u003C\u002Fp\u003E\n\u003Ch3 id=\"1-call-order-of-code-fetch-code-hook\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#1-call-order-of-code-fetch-code-hook\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003E1. Call order of \u003Ccode\u003Efetch\u003C\u002Fcode\u003E hook\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cstrong\u003EBefore -\u003C\u002Fstrong\u003E \u003Ccode\u003Efetch\u003C\u002Fcode\u003E hook was called before initiating the component, hence \u003Ccode\u003Ethis\u003C\u002Fcode\u003E wasn’t available inside the fetch hook.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003EAfter -\u003C\u002Fstrong\u003E \u003Ccode\u003Efetch\u003C\u002Fcode\u003E is called after the component instance is created on the server-side when the route is accessed.\u003C\u002Fp\u003E\n\u003Ch3 id=\"2-code-this-code-vs-code-context-code-\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#2-code-this-code-vs-code-context-code-\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003E2. \u003Ccode\u003Ethis\u003C\u002Fcode\u003E vs \u003Ccode\u003Econtext\u003C\u002Fcode\u003E\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cstrong\u003EBefore -\u003C\u002Fstrong\u003E We had access to the Nuxt \u003Ccode\u003Econtext\u003C\u002Fcode\u003E on page-level components, given that the \u003Ccode\u003Econtext\u003C\u002Fcode\u003E is passed as a first parameter.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  fetch(context) {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F …\u003C\u002Fspan\u003E\n  }\n};\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Cstrong\u003EAfter -\u003C\u002Fstrong\u003E We can access \u003Ccode\u003Ethis\u003C\u002Fcode\u003E context just like Vue client-side hooks without passing any parameters.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  fetch() {\n    \u003Cspan class=\"hljs-built_in\"\u003Econsole\u003C\u002Fspan\u003E.log(\u003Cspan class=\"hljs-keyword\"\u003Ethis\u003C\u002Fspan\u003E);\n  }\n};\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3 id=\"3-availability-of-code-fetch-code-hook\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#3-availability-of-code-fetch-code-hook\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003E3. Availability of \u003Ccode\u003Efetch\u003C\u002Fcode\u003E hook\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cstrong\u003EBefore -\u003C\u002Fstrong\u003E Only page (route-level) components were allowed to fetch data on the server-side.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003EAfter -\u003C\u002Fstrong\u003E Now, we can pre-fetch the data asynchronously in any Vue components.\u003C\u002Fp\u003E\n\u003Ch3 id=\"4-call-order-of-code-fetch-code-hook\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#4-call-order-of-code-fetch-code-hook\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003E4. Call order of \u003Ccode\u003Efetch\u003C\u002Fcode\u003E hook\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cstrong\u003EBefore -\u003C\u002Fstrong\u003E \u003Ccode\u003Efetch\u003C\u002Fcode\u003E could be called server-side once (on the first request to the Nuxt app) and client-side when navigating to further routes.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003EAfter -\u003C\u002Fstrong\u003E New \u003Ccode\u003Efetch\u003C\u002Fcode\u003E is the same as an old fetch, but…\u003C\u002Fp\u003E\n\u003Cp\u003E…since we can have one \u003Ccode\u003Efetch\u003C\u002Fcode\u003E for each component, \u003Ccode\u003Efetch\u003C\u002Fcode\u003E hooks are called in sequence of their hierarchy.\u003C\u002Fp\u003E\n\u003Ch3 id=\"5-error-handling\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#5-error-handling\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003E5. Error Handling\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cstrong\u003EBefore -\u003C\u002Fstrong\u003E We used the \u003Ccode\u003Econtext.error\u003C\u002Fcode\u003E function that showed a custom error page when an error occurred during API calls.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003EAfter -\u003C\u002Fstrong\u003E New \u003Ccode\u003Efetch\u003C\u002Fcode\u003E uses the \u003Ccode\u003E$fetchState\u003C\u002Fcode\u003E object to handle errors in the template area during API calls.\u003C\u002Fp\u003E\n\u003Cp\u003EError handling is performed at component level.\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003EDoes this mean we cannot show users a custom error page like we did prior to Nuxt 2.12?\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003EYes we can, but only with \u003Ccode\u003EasyncData()\u003C\u002Fcode\u003E when it&#39;s about page-level component data. When using \u003Ccode\u003Efetch\u003C\u002Fcode\u003E, we can utilize \u003Ccode\u003Ethis.$nuxt.error({ statusCode: 404, message: &#39;Data not found&#39; })\u003C\u002Fcode\u003E to show a custom error page.\u003C\u002Fp\u003E\n\u003Ch2 id=\"conclusion\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#conclusion\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EConclusion\u003C\u002Fh2\u003E\u003Cp\u003ENew fetch hook brings a lot of improvements and provides more flexibility in fetching data and organising route-level &amp; building-block components in a whole new way!\u003C\u002Fp\u003E\n\u003Cp\u003EIt will certainly make you think a little differently when you plan and design your new Nuxt project that requires multiple API calls within the same route.\u003C\u002Fp\u003E\n\u003Cp\u003EI hope this article has helped you get acquainted with the new \u003Ccode\u003Efetch\u003C\u002Fcode\u003E feature. I&#39;d love to see what you build with it.\u003C\u002Fp\u003E\n\u003Ch2 id=\"what-39-s-next\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#what-39-s-next\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EWhat&#39;s next\u003C\u002Fh2\u003E\u003Cul\u003E\n\u003Cli\u003ERead \u003Ca href=\"\u002Fblog\u002Fbuild-dev-to-clone-with-nuxt-new-fetch\"\u003ESergey Bedritsky&#39;s article\u003C\u002Fa\u003E to see new \u003Ccode\u003Efetch\u003C\u002Fcode\u003E hook in action as he shows how to buid dev.to clone!\u003C\u002Fli\u003E\n\u003Cli\u003EAlready missed March newsletter? \u003Ca href=\"#subscribe-to-newsletter\"\u003ESubscribe to Nuxt newsletter\u003C\u002Fa\u003E and get latest articles and resources delivered right into your inbox.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n",links:{previous:{title:"Build a DEV.TO clone with Nuxt new fetch",slug:"build-dev-to-clone-with-nuxt-new-fetch"},next:{title:"NuxtJS: From Terminal to Browser",slug:"nuxtjs-from-terminal-to-browser"}}}}],fetch:[],mutations:[]});