__NUXT_JSONP__("/examples/auth-external-jwt", {data:[{},{path:"\u002Fvi\u002Fexamples\u002Fauth-external-jwt",section:"examples",page:{attrs:{title:"Auth External API (JWT)",description:"Authentication with external API service (jsonwebtoken) example with Nuxt.js",github:"auth-jwt",code:"https:\u002F\u002Fgithub.com\u002Fahadyekta\u002Fnuxt-auth-external-jwt"},body:"\u003Ch1 id=\"documentation\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#documentation\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EDocumentation\u003C\u002Fh1\u003E\u003Cp\u003EIn auth-routes example both api and nuxt start together and use one Node.js server instance. However, sometimes we should work with external api with jsonWebToken. In this example it will be explained in a simple way.\u003C\u002Fp\u003E\n\u003Ch2 id=\"official-code-auth-module-code-\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#official-code-auth-module-code-\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EOfficial \u003Ccode\u003Eauth-module\u003C\u002Fcode\u003E\u003C\u002Fh2\u003E\u003Cp\u003EIf you want to implement complex authentication flows, for example OAuth2, we suggest using the official \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fnuxt-community\u002Fauth-module\"\u003E\u003Ccode\u003Eauth-module\u003C\u002Fcode\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Ch2 id=\"structure\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#structure\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EStructure\u003C\u002Fh2\u003E\u003Cp\u003ESince Nuxt.js provides both server and client rendering and the cookie of browser is different from cookie of the Node.js server, we should push token data to some storage that can be accessible in both sides.\u003C\u002Fp\u003E\n\u003Ch3 id=\"for-server-rendering\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#for-server-rendering\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EFor server rendering\u003C\u002Fh3\u003E\u003Cp\u003EWe should save the token in session browser cookie after login, then it can be accessed through \u003Ccode\u003Ereq.headers.cookie\u003C\u002Fcode\u003E in middleware files, \u003Ccode\u003EnuxtServerInit\u003C\u002Fcode\u003E function or  wherever you can access the \u003Ccode\u003Ereq\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\u003Ch3 id=\"for-client-rendering\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#for-client-rendering\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EFor client rendering\u003C\u002Fh3\u003E\u003Cp\u003EWe directly commit token in the store, as long as the page is not closed or reloaded, we have the token.\u003C\u002Fp\u003E\n\u003Cp\u003EFirst, we install the dependencies:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Enpm install js-cookie --save\nnpm install cookieparser --save\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2 id=\"login-page\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#login-page\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003ELogin Page\u003C\u002Fh2\u003E\u003Cp\u003EThen inside page directory make a \u003Ccode\u003Elogin.vue\u003C\u002Fcode\u003E file, and inside the script section, add:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E Cookie = process.client ? \u003Cspan class=\"hljs-built_in\"\u003Erequire\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E'js-cookie'\u003C\u002Fspan\u003E) : \u003Cspan class=\"hljs-literal\"\u003Eundefined\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003Emiddleware\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E'notAuthenticated'\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003Emethods\u003C\u002Fspan\u003E: {\n    postLogin () {\n      setTimeout(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003E()\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E { \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F we simulate the async request with timeout.\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E auth = {\n          \u003Cspan class=\"hljs-attr\"\u003EaccessToken\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E'someStringGotFromApiServiceWithAjax'\u003C\u002Fspan\u003E\n        }\n        \u003Cspan class=\"hljs-keyword\"\u003Ethis\u003C\u002Fspan\u003E.$store.commit(\u003Cspan class=\"hljs-string\"\u003E'setAuth'\u003C\u002Fspan\u003E, auth) \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F mutating to store for client rendering\u003C\u002Fspan\u003E\n        Cookie.set(\u003Cspan class=\"hljs-string\"\u003E'auth'\u003C\u002Fspan\u003E, auth) \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F saving token in cookie for server rendering\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-keyword\"\u003Ethis\u003C\u002Fspan\u003E.$router.push(\u003Cspan class=\"hljs-string\"\u003E'\u002F'\u003C\u002Fspan\u003E)\n      }, \u003Cspan class=\"hljs-number\"\u003E1000\u003C\u002Fspan\u003E)\n    }\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cblockquote\u003E\n\u003Cp\u003ENote: we simulate the async request with timeout.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch2 id=\"using-the-store\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#using-the-store\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EUsing the store\u003C\u002Fh2\u003E\u003Cp\u003EAfter that make \u003Ccode\u003Eindex.js\u003C\u002Fcode\u003E in \u003Ccode\u003Estore\u003C\u002Fcode\u003E directory like below :\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs javascript\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E Vuex \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E'vuex'\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E cookieparser = process.server ? \u003Cspan class=\"hljs-built_in\"\u003Erequire\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E'cookieparser'\u003C\u002Fspan\u003E) : \u003Cspan class=\"hljs-literal\"\u003Eundefined\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E createStore = \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003E()\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E Vuex.Store({\n    \u003Cspan class=\"hljs-attr\"\u003Estate\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003E()\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E ({\n      \u003Cspan class=\"hljs-attr\"\u003Eauth\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E\n    }),\n    \u003Cspan class=\"hljs-attr\"\u003Emutations\u003C\u002Fspan\u003E: {\n      setAuth (state, auth) {\n        state.auth = auth\n      }\n    },\n    \u003Cspan class=\"hljs-attr\"\u003Eactions\u003C\u002Fspan\u003E: {\n      nuxtServerInit ({ commit }, { req }) {\n        \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E auth = \u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (req.headers.cookie) {\n          \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E parsed = cookieparser.parse(req.headers.cookie)\n          \u003Cspan class=\"hljs-keyword\"\u003Etry\u003C\u002Fspan\u003E {\n            auth = \u003Cspan class=\"hljs-built_in\"\u003EJSON\u003C\u002Fspan\u003E.parse(parsed.auth)\n          } \u003Cspan class=\"hljs-keyword\"\u003Ecatch\u003C\u002Fspan\u003E (err) {\n            \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F No valid cookie found\u003C\u002Fspan\u003E\n          }\n        }\n        commit(\u003Cspan class=\"hljs-string\"\u003E'setAuth'\u003C\u002Fspan\u003E, auth)\n      }\n    }\n  })\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E createStore\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cblockquote\u003E\n\u003Cp\u003ENote: the \u003Ccode\u003EnuxtServerInit\u003C\u002Fcode\u003E function only runs in every server side rendering. So we use it to mutate the session browser cookie in the store. We can get the session browser cookie by using \u003Ccode\u003Ereq.headers.cookie\u003C\u002Fcode\u003E and parse it using \u003Ccode\u003Ecookieparser\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch2 id=\"checking-auth-middlewares\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#checking-auth-middlewares\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003Echecking auth middlewares\u003C\u002Fh2\u003E\u003Cp\u003EWe can check the store for havin the accessToken in every page we need to limit access. In middleware directory we make \u003Ccode\u003Eauthenticated.js\u003C\u002Fcode\u003E file:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs javascript\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003E{ store, redirect }\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F If the user is not authenticated\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (!store.state.auth) {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E redirect(\u003Cspan class=\"hljs-string\"\u003E'\u002Flogin'\u003C\u002Fspan\u003E)\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eand in middleware directory make \u003Ccode\u003EnotAuthenticated.js\u003C\u002Fcode\u003E file for login page:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs javascript\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003E{ store, redirect }\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F If the user is authenticated redirect to home page\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (store.state.auth) {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E redirect(\u003Cspan class=\"hljs-string\"\u003E'\u002F'\u003C\u002Fspan\u003E)\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cblockquote\u003E\n\u003Cp\u003ENote: use \u003Ccode\u003Eauthenticated\u003C\u002Fcode\u003E middleware for pages which need authentication and use \u003Ccode\u003EnotAuthenticated\u003C\u002Fcode\u003E middleware inside the login\u002Fregister and similar pages.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch2 id=\"logging-out-the-user\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#logging-out-the-user\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003ELogging out the User\u003C\u002Fh2\u003E\u003Cp\u003EFinally to allow the user to logout of the system, we can remove the cookie: \u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs javascript\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E Cookie = process.client ? \u003Cspan class=\"hljs-built_in\"\u003Erequire\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E'js-cookie'\u003C\u002Fspan\u003E) : \u003Cspan class=\"hljs-literal\"\u003Eundefined\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003Emethods\u003C\u002Fspan\u003E: {\n    logout () {\n      \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Code will also be required to invalidate the JWT Cookie on external API\u003C\u002Fspan\u003E\n      Cookie.remove(\u003Cspan class=\"hljs-string\"\u003E'auth'\u003C\u002Fspan\u003E)\n      \u003Cspan class=\"hljs-keyword\"\u003Ethis\u003C\u002Fspan\u003E.$store.commit(\u003Cspan class=\"hljs-string\"\u003E'setAuth'\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E)\n    }\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cblockquote\u003E\n\u003Cp\u003ENote: refer to the method using @click=&quot;logout&quot;\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n"},contributors:[]}],fetch:[],mutations:[]});